#!/bin/bash

ALL_ARGS=$@

command=$1


VALIDATE_SMILES="false"
CANONICALIZE_SMILES="false"

for x in $ALL_ARGS
do 
HELP=$x;

if [ "$x" = "--validate_smiles" ]; then
    VALIDATE_SMILES="true" ; 
fi

if [ "$x" = "--canonicalize_smiles" ]; then
    CANONICALIZE_SMILES="true" ; 
fi

done

while [ $# -gt 0 ]; do
    if [[ $1 == "--"* ]]; then
        v="${1/--/}"
        declare "$v"="$2"
        shift
    fi
    shift
done


if [ "$dest" = "" ]; then
    INFERENCE_OUTPUT_DIR="output"
else
    INFERENCE_OUTPUT_DIR=$dest

fi

# Specify GPU device
if [ "$gpu_devices" = "" ]; then
    GPU_DEVICES="0"

else
    GPU_DEVICES=$gpu_devices
fi

# Specify Search type for cheese-embeddings
if [ "$search_types" = "" ]; then
    SEARCH_TYPES="all"
else
    SEARCH_TYPES=$search_types
fi

# Specify chunk size for inference
if [ "$chunk_size" = "" ]; then
    CHUNK_SIZE=100000
else
    CHUNK_SIZE=$chunk_size
fi

# Specify embeddings computation batch size for inference
if [ "$batch_size" = "" ]; then
    BATCH_SIZE=1024
else
    BATCH_SIZE=$batch_size
fi

# Specify clustering batch size for inference
if [ "$clustering_batch_size" = "" ]; then
    CLUSTERING_BS=10000
else
    CLUSTERING_BS=$clustering_batch_size
fi



if [ "$command" = "update_config" ]; then
    mkdir $HOME/.config
    mkdir $HOME/.config/cheese
    cat $env_config >> ~/.config/cheese/cheese-env-user.conf

else
    source /etc/cheese/cheese-env.sh
    if [ "$command" = "start_app" ]; then
        cheese-app

    elif [ "$command" = "update" ]; then
        update-cheese

    elif [ "$command" = "inference" ]; then
        if [ "$HELP" = "--help" ]; then
            docker run -u $UID -it --entrypoint "python" -v /:/data --env PORT=$DB_PORT --env CONFIG_FILE=/data/$CONFIG_FILE --env LICENSING=True --env TRANSFORMERS_CACHE=/tmp --env CHEESE_LICENSE_FILE=/data/$LICENSE_FILE --rm $DB_IMAGE -c 'import cheese_database.cheese_cli as cli; cli.app();' $ALL_ARGS
        else
            cheese-inference --input_file $input_file --dest $INFERENCE_OUTPUT_DIR --gpu_devices $GPU_DEVICES --valid_smiles $VALIDATE_SMILES --canonical_smiles $CANONICALIZE_SMILES --clustering_bs $CLUSTERING_BS --chunk_size $CHUNK_SIZE --batch_size $BATCH_SIZE --index_type $index_type
        fi

    elif [ "$command" = "embeddings_gpu" ]; then
        if [ "$HELP" = "--help" ]; then
            docker run -u $UID -it --entrypoint "python" -v /:/data --env PORT=$DB_PORT --env CONFIG_FILE=/data/$CONFIG_FILE --env LICENSING=True --env CHEESE_LICENSE_FILE=/data/$LICENSE_FILE --env TRANSFORMERS_CACHE=/tmp --rm $DB_IMAGE -c 'import cheese_database.cheese_cli as cli; cli.app();' $ALL_ARGS
        else
            cheese-embeddings --input_file $input_file --dest $INFERENCE_OUTPUT_DIR --search_types $SEARCH_TYPES --gpu_devices $GPU_DEVICES --save_format $save_format;
        fi

    else
        docker run -u $UID -it --entrypoint "python" -v /:/data --env PORT=$DB_PORT --env CONFIG_FILE=/data/$CONFIG_FILE --env LICENSING=True --env CHEESE_LICENSE_FILE=/data/$LICENSE_FILE --env TRANSFORMERS_CACHE=/tmp --rm $DB_IMAGE -c 'import cheese_database.cheese_cli as cli; cli.app();' $ALL_ARGS
    fi
fi